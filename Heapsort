import matplotlib.pyplot as plt
import numpy as np
import time
import networkx as nx

def heapsort(arr):
    # Função para construir o heap máximo
    def heapify(arr, n, i):
        largest = i  # Inicializa o maior como raiz
        left = 2 * i + 1
        right = 2 * i + 2
        
        # Verifica se o filho esquerdo é maior que a raiz
        if left < n and arr[left] > arr[largest]:
            largest = left
        
        # Verifica se o filho direito é maior que a raiz
        if right < n and arr[right] > arr[largest]:
            largest = right
        
        # Se o maior não é a raiz
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]  # Troca
            # Chama heapify recursivamente na subárvore afetada
            heapify(arr, n, largest)
    
    n = len(arr)
    
    
    # Constrói um heap máximo
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    
    # Extrai elementos um por um do heap
    for i in range(n - 1, 0, -1):
        arr[0], arr[i] = arr[i], arr[0]  # Troca
        heapify(arr, i, 0)
        print(arr)
    
    # Inicio da parte gráfrica
        def build_tree(arr):
            G = nx.DiGraph()
    
            # Adicionando nós e arestas
            for i, value in enumerate(arr):
                if i == 0:
                    G.add_node(value)
                else:
                    parent = arr[(i - 1) // 2]
                    G.add_edge(parent, value)
    
            return G

        def hierarchy_pos(G, root=None, width=1., vert_gap=0.2, vert_loc=0, xcenter=0.5):
            pos = {root: (xcenter, vert_loc)}
            children = list(G.neighbors(root))
            if children:
                dx = width / len(children) 
                nextx = xcenter - width/2 - dx/2
                for child in children:
                    nextx += dx
                    pos.update(hierarchy_pos(G, child, width=dx, vert_gap=vert_gap, vert_loc=vert_loc-vert_gap, xcenter=nextx))
            return pos

# Construir a árvore
        G = build_tree(arr)

# Criar uma figura e um eixo
        fig, ax = plt.subplots()

# Desenhar a árvore de forma hierárquica
        pos = hierarchy_pos(G, root=arr[0])
        nx.draw(G, pos, with_labels=True, node_color='lightblue', font_weight='bold', node_size=1000, ax=ax)

# Fim da parte gráfica
        plt.show()

# Exemplo de uso:
arr = []
while True:
    entrada = input("numeros para serem ordenados(digite N para parar)")
    if not entrada.isnumeric():
        break
    arr.append(int(entrada))
heapsort(arr)
print("Array ordenado após o heapsort é:", arr)
